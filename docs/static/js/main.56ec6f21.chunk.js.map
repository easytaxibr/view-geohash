{"version":3,"sources":["Helper.js","components/MapContainer.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["geohashToPolygon","geohash","Geohash","bounds","length","Error","toLowerCase","evenBit","latMin","latMax","lonMin","lonMax","i","chr","charAt","idx","base32","indexOf","n","bitN","lonMid","latMid","sw","lat","lon","ne","polygon","lng","stringToArray","string","replace","JSON","parse","MapContainer","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","geohashes","props","geohashesArray","initialCenter","react_default","a","createElement","dist","google","zoom","style","width","height","map","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","Component","GoogleApiWrapper","apiKey","Form","geohashArray","React","createRef","sendGeohashes","e","preventDefault","_this","getGeohashArray","current","onSubmit","type","className","htmlFor","ref","id","rows","App","state","isFormatArray","geohashesString","setState","error","console","log","showError","role","Form_Form","components_MapContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56ec6f21.chunk.js","sourcesContent":["export const geohashToPolygon = (geohash) => {\n    var Geohash = {};\n\n    /* (Geohash-specific) Base32 map */\n    Geohash.base32 = '0123456789bcdefghjkmnpqrstuvwxyz';\n        function bounds(geohash) {\n            if (geohash.length === 0) throw new Error('Invalid geohash');\n        \n            geohash = geohash.toLowerCase();\n        \n            var evenBit = true;\n            var latMin =  -90, latMax =  90;\n            var lonMin = -180, lonMax = 180;\n            \n            for (var i=0; i < geohash.length; i++) {\n                var chr = geohash.charAt(i);\n                var idx = Geohash.base32.indexOf(chr);\n                if (idx == -1) throw new Error('Invalid geohash');\n        \n                for (var n=4; n>=0; n--) {\n                    var bitN = idx >> n & 1;\n                    if (evenBit) {\n                        // longitude\n                        var lonMid = (lonMin+lonMax) / 2;\n                        if (bitN == 1) {\n                            lonMin = lonMid;\n                        } else {\n                            lonMax = lonMid;\n                        }\n                    } else {\n                        // latitude\n                        var latMid = (latMin+latMax) / 2;\n                        if (bitN == 1) {\n                            latMin = latMid;\n                        } else {\n                            latMax = latMid;\n                        }\n                    }\n                    evenBit = !evenBit;\n                }\n            }\n            \n            var bounds = {\n                sw: { lat: latMin, lon: lonMin },\n                ne: { lat: latMax, lon: lonMax },\n            };\n        \n            return bounds;\n        };\n        if (geohash === 'none'){\n            var polygon = [];\n        }else{\n            var bounds = bounds(geohash); // <-- the hard work\n            // now just determine the centre of the cell...\n            var latMin = bounds.sw.lat, lonMin = bounds.sw.lon;\n            var latMax = bounds.ne.lat, lonMax = bounds.ne.lon;\n        var polygon = [\n            {lat: latMin, lng: lonMin},\n            {lat: latMax, lng: lonMin},\n            {lat: latMax, lng: lonMax},\n            {lat: latMin, lng: lonMax}\n          ];\n    }\n    return polygon;\n}\n\nexport const stringToArray = (string) => {\n    string = string.replace(/'/g, '\"');\n    return JSON.parse(string);\n}","import { Map, GoogleApiWrapper, Polygon } from 'google-maps-react';\nimport React, { Component } from 'react';\nimport { geohashToPolygon } from '../Helper';\n\nexport class MapContainer extends Component {\n\n    render() {\n\n        const style = {\n            width: '100%',\n            height: '100%'\n        }\n\n        const geohashes = this.props.geohashesArray;\n        let initialCenter = {\n            lat: -12.046374,\n            lng: -77.042793\n        }\n        if (geohashes.length > 0) {\n            initialCenter = {\n                lat: geohashToPolygon(geohashes[0])[0].lat,\n                lng: geohashToPolygon(geohashes[0])[0].lng\n            }\n        }\n        return (\n            <Map\n                google={this.props.google}\n                zoom={12}\n                style={style}\n                initialCenter={initialCenter}\n            >\n                {\n                    geohashes.map(geohash => (\n                        <Polygon\n                            key={geohash}\n                            paths={geohashToPolygon(geohash)}\n                            strokeColor=\"#0000FF\"\n                            strokeOpacity={0.8}\n                            strokeWeight={2}\n                            fillColor=\"#0000FF\"\n                            fillOpacity={0.35} />\n                    ))\n                }\n            </Map>\n        );\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: (\"AIzaSyCBWo3rmdNe-AYqM_A8tqo3HC952a36LAk\")\n})(MapContainer)","import React, { Component } from 'react';\n\nexport default class Form extends Component {\n\n    geohashArray = React.createRef();\n\n    sendGeohashes = (e) => {\n        e.preventDefault();\n        this.props.getGeohashArray(this.geohashArray.current.value);\n    }\n    \n    render() {\n        return (\n            <form onSubmit={this.sendGeohashes}>\n                <button type=\"submit\" className=\"btn btn-primary btn-lg btn-block\">Draw geoHashes</button>\n                <div className=\"form-group\">\n                    <label htmlFor=\"exampleFormControlTextarea1\">Introducte heohash array | <strong> eg. [\"aaeet\", \"bbbbg\"] </strong> </label>\n                    <textarea ref={this.geohashArray} className=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"35\"></textarea>\n                </div>\n            </form>\n        );\n    }\n}","import React, { Component } from 'react';\nimport MapContainer from './components/MapContainer'\nimport Form from './components/Form'\nimport { stringToArray } from './Helper';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    geohashesArray: [],\n    isFormatArray: ''\n  }\n\n  getGeohashArray = (geohashesString) => {\n    try {\n      let geohashesArray = stringToArray(geohashesString);\n      this.setState({\n        geohashesArray: geohashesArray,\n        isFormatArray: true\n      })\n    } catch (error) {\n      this.setState({\n        isFormatArray: false\n      });\n      console.log('No tiene el formato definido');\n    }\n  }\n\n  showError = () => {\n    if (this.state.isFormatArray) {\n      return (\n        <div className=\"alert alert-danger\" role=\"alert\">\n          <p>The format is not correct</p>\n        </div>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"row center_div\">\n        <div className=\"col-3 \">\n          {this.showError()}\n          <Form getGeohashArray={this.getGeohashArray} />\n        </div>\n        <div className=\"col-9 static\">\n          <MapContainer geohashesArray={this.state.geohashesArray} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}